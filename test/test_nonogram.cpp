// Auto-generated nonogram tests
#define TESTING
#include <gtest/gtest.h>
#include <vector>
#include <string>

using CellState = char;

std::vector<std::vector<CellState>> solveNonogram(int h, int w,
    const std::vector<std::vector<int>>& hinfo,
    const std::vector<std::vector<int>>& winfo);

std::vector<std::string> toStringList(const std::vector<std::vector<CellState>> &list) {
    std::vector<std::string> result;
    for (const auto &row : list) {
        std::string s;
        bool first = true;
        for (const auto &cell : row) {
            if(first) {
                first = false;
            } else {
                s += ' ';
            }
            if (cell == 1) {
                s += '#';
            } else if (cell == 2) {
                s += '.';
            } else {
                s += '?';
            }
        }
        result.push_back(s);
    }
    return result;
}

TEST(NonogramTest, SolveCamel3030) {
    std::vector<std::vector<int>> hinfo = {{3}, {3, 6}, {10}, {7, 3}, {4, 3, 1, 4}, {6, 10}, {7, 11}, {9, 10}, {9, 7, 2}, {12, 6, 2}, {14, 7}, {22}, {22}, {23}, {23}, {23}, {2, 20}, {1, 18}, {1, 17}, {2, 12, 4}, {1, 4, 3, 3, 3}, {2, 4, 2, 3, 3}, {2, 3, 3, 3, 3}, {2, 3, 3, 3, 3}, {1, 2, 3, 3, 2}, {3, 3, 2, 2}, {2, 3, 2, 2}, {2, 3, 3, 4}, {3, 4, 4, 3}, {3, 4, 4}};
    std::vector<std::vector<int>> winfo = {{4, 4}, {3, 5}, {3}, {8, 4}, {17}, {21}, {15, 5}, {15, 3, 2}, {23}, {26}, {17, 5}, {16, 3}, {15, 2}, {19}, {23}, {21}, {2, 9, 3}, {3, 9, 2, 2}, {3, 18}, {6, 20}, {20, 2}, {16, 2}, {3, 12}, {2, 12}, {3, 9}, {9}, {2, 7}, {5, 1}, {5}, {3}};

    auto result = solveNonogram(30, 30, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . . . . . . . . . . . . . . . . . . . . . . . # # # . . .",
        ". . . . . . . . . . . . . . . . . # # # . # # # # # # . . .",
        ". . . . . . . . . . . . . . . . # # # # # # # # # # . . . .",
        ". . . . . . . . . . . . . . . . # # # # # # # . . # # # . .",
        ". . . . . . . . # # # # . . . . . . . # # # . # . # # # # .",
        ". . . . . . . # # # # # # . . . . . . # # # # # # # # # # .",
        ". . . . . . . # # # # # # # . . . . . # # # # # # # # # # #",
        ". . . . . . # # # # # # # # # . . . . . # # # # # # # # # #",
        ". . . . . . # # # # # # # # # . . . . . # # # # # # # . # #",
        ". . . . # # # # # # # # # # # # . . . # # # # # # . # # . .",
        ". . . # # # # # # # # # # # # # # . # # # # # # # . . . . .",
        ". . . # # # # # # # # # # # # # # # # # # # # # # . . . . .",
        ". . . # # # # # # # # # # # # # # # # # # # # # # . . . . .",
        ". . # # # # # # # # # # # # # # # # # # # # # # # . . . . .",
        ". # # # # # # # # # # # # # # # # # # # # # # # . . . . . .",
        ". # # # # # # # # # # # # # # # # # # # # # # # . . . . . .",
        "# # . # # # # # # # # # # # # # # # # # # # # . . . . . . .",
        "# . . # # # # # # # # # # # # # # # # # # . . . . . . . . .",
        "# . . . # # # # # # # # # # # # # # # # # . . . . . . . . .",
        "# # . . # # # # # # # # # # # # . # # # # . . . . . . . . .",
        ". # . # # # # . # # # . . # # # . . # # # . . . . . . . . .",
        "# # . # # # # . # # . . . # # # . . # # # . . . . . . . . .",
        "# # . # # # . # # # . . . # # # . # # # . . . . . . . . . .",
        "# # . # # # . # # # . . . # # # . # # # . . . . . . . . . .",
        "# . . . # # . # # # . . . # # # . . # # . . . . . . . . . .",
        ". . . . # # # . # # # . . . # # . . # # . . . . . . . . . .",
        ". . . . . # # . # # # . . . # # . . # # . . . . . . . . . .",
        ". . . . . # # . . # # # . . # # # . # # # # . . . . . . . .",
        ". . . . . # # # . # # # # . # # # # . # # # . . . . . . . .",
        ". . . . . # # # . # # # # . # # # # . . . . . . . . . . . ."
    }));
}
TEST(NonogramTest, SolveCu1414) {
    std::vector<std::vector<int>> hinfo = {{4}, {7}, {3, 3}, {2, 2}, {2}, {2}, {2}, {2, 1, 1}, {2, 1, 1}, {2, 1, 1}, {2, 3, 1}, {3, 4, 1}, {7, 1, 2}, {4, 2, 1}};
    std::vector<std::vector<int>> winfo = {{10}, {12}, {3, 3}, {2, 2}, {2, 2}, {2, 2}, {2, 2}, {3, 3}, {2, 2}, {6}, {1}, {1}, {1}, {7}};

    auto result = solveNonogram(14, 14, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . # # # # . . . . . . . .",
        ". # # # # # # # . . . . . .",
        "# # # . . . # # # . . . . .",
        "# # . . . . . # # . . . . .",
        "# # . . . . . . . . . . . .",
        "# # . . . . . . . . . . . .",
        "# # . . . . . . . . . . . .",
        "# # . . . . . . . ? . ? . #",
        "# # . . . . . . . # . . . #",
        "# # . . . . . . . # . . . #",
        "# # . . . . . # # # . . . #",
        "# # # . . . # # # # . . . #",
        ". # # # # # # # . # . . # #",
        ". . # # # # . . . ? # ? . #"
    }));
}
TEST(NonogramTest, SolveDeer3030) {
    std::vector<std::vector<int>> hinfo = {{1}, {1}, {1, 3, 1}, {1, 2, 1, 2, 1}, {4, 1, 1, 1, 2}, {2, 2, 3, 2}, {2, 2, 1, 2, 2, 4}, {3, 2, 1, 1, 3, 1}, {3, 5, 1, 3, 1}, {2, 1, 4, 4, 1, 2}, {4, 2, 5, 2}, {4, 2, 5, 5}, {4, 3, 10}, {12, 3, 3}, {14}, {9}, {12}, {4, 5, 1}, {7, 2}, {10}, {11}, {13}, {7, 4}, {7, 2}, {7}, {5, 8}, {18}, {22}, {23}, {24}};
    std::vector<std::vector<int>> winfo = {{1}, {2}, {1, 3}, {2, 3}, {2, 2, 3}, {7, 3}, {4, 4, 4}, {3, 2, 1, 4}, {5, 4}, {3, 5}, {3, 5}, {3, 5}, {2, 2, 5}, {3, 2, 1, 5}, {4, 7, 2, 4}, {10, 2, 5}, {1, 1, 2, 6, 9}, {4, 1, 1, 4, 12}, {5, 17}, {5, 2, 16}, {21}, {22}, {24}, {7, 3, 3, 4, 4}, {4, 2, 1, 2, 3}, {1, 3, 7}, {5, 6}, {7, 4}, {2, 2}, {1}};

    auto result = solveNonogram(30, 30, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . . . . . . . . . . . . . . . . # . . . . . . . . . . . .",
        ". . . . . . . . . . . . . . . . . # . . . . . . . . . . . .",
        ". . . . . . . # . . . . . . . . # # # . . . . # . . . . . .",
        ". . . . # . # # . . . . . . # . . # # . . . . # . . . . . .",
        ". . . . # # # # . . . . . . # . # . # . . . . # # . . . . .",
        ". . . . . # # . . . . . . . # # . # # # . . . # # . . . . .",
        ". . # # . # # . . . . . # . # # . . # # . . # # # # . . . .",
        ". . . # # # . . . . . . # # . # . . . # . . # # # . . # . .",
        ". . . . # # # . . . . . . # # # # # . # . # # # . . . # . .",
        ". . . . . # # . # . . . . # # # # . . # # # # . # . # # . .",
        ". . . . . # # # # . . . . . # # . . . . # # # # # . # # . .",
        ". . . . . . # # # # . . . . # # . . . # # # # # . # # # # #",
        ". . . . . . . . # # # # . . # # # . . # # # # # # # # # # .",
        ". . . . . . . # # # # # # # # # # # # . # # # . . # # # . .",
        ". . . . . . . . . . # # # # # # # # # # # # # # . . . . . .",
        ". . . . . . . . . . . . . . . . # # # # # # # # # . . . . .",
        ". . . . . . . . . . . . . . # # # # # # # # # # # # . . . .",
        ". . . . . . . . . . . . . # # # # . # # # # # . . # . . . .",
        ". . . . . . . . . . . . . . . . . # # # # # # # . # # . . .",
        ". . . . . . . . . . . . . . . . . # # # # # # # # # # . . .",
        ". . . . . . . . . . . . . . . . . # # # # # # # # # # # . .",
        ". . . . . . . . . . . . . . . . # # # # # # # # # # # # # .",
        ". . . . . . . . . . . . . . . . # # # # # # # . . # # # # .",
        ". . . . . . . . . . . . . . . . # # # # # # # . . . # # . .",
        ". . . . . . . . . . . . . . . . # # # # # # # . . . . . . .",
        ". . . . . . . . . # # # # # . # # # # # # # # . . . . . . .",
        ". . . . . . # # # # # # # # # # # # # # # # # # . . . . . .",
        ". . # # # # # # # # # # # # # # # # # # # # # # . . . . . .",
        ". # # # # # # # # # # # # # # # # # # # # # # # . . . . . .",
        "# # # # # # # # # # # # # # # # # # # # # # # # . . . . . ."
    }));
}
TEST(NonogramTest, SolveEagle3030) {
    std::vector<std::vector<int>> hinfo = {{7}, {11}, {3, 3}, {3, 3}, {4, 2}, {3, 2}, {2, 1, 2}, {3, 6, 1}, {2, 2, 1, 2}, {1, 1, 6, 1}, {2, 2, 1, 2}, {3, 2, 2, 2}, {3, 2, 4, 1, 1}, {2, 4, 1, 1, 2, 2, 1}, {2, 12, 2, 1}, {1, 1, 15, 1}, {1, 2, 2, 6, 2, 1}, {5, 5, 1, 1}, {4, 5, 3}, {3, 6, 2}, {3, 1, 5, 1}, {2, 1, 2, 2, 2}, {1, 5, 1, 2}, {1, 5, 1, 2}, {7, 1, 2}};
    std::vector<std::vector<int>> winfo = {{6, 6, 7}, {6, 4, 5, 1}, {4, 1, 3, 5, 3}, {3, 2, 4, 4}, {2, 1, 3}, {1, 2, 4}, {2, 2, 1, 6}, {2, 6, 3}, {2, 12}, {2, 12}, {2, 7}, {2, 2, 8}, {2, 1, 4, 5}, {2, 1, 3, 3}, {2, 3, 1, 2}, {2, 9}, {1, 1, 1, 2, 2}, {2, 2, 1, 2}, {2, 1, 1, 1}, {2, 2, 3}, {3, 3}, {2, 2, 2}, {2, 1, 4}, {2, 2}, {6}};

    auto result = solveNonogram(25, 25, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . . . . . # # # # # # # . . . . . . . . . . . .",
        ". . . . # # # # # # # # # # # . . . . . . . . . .",
        ". . # # # . . . . . . . . # # # . . . . . . . . .",
        ". # # # . . . . . . . . . . . # # # . . . . . . .",
        "# # # # . . . . . . . . . . . . . # # . . . . . .",
        "# # # . . . . . . . . . . . . . . . # # . . . . .",
        "# # . . . . . . . . . # . . . . . . . # # . . . .",
        "# # # . . . . . . . . # # # # # # . . . # . . . .",
        "# # . . . . . . . . . . . . # # . # . # # . . . .",
        "# . . # . . . . . . . . . . # # # # # # . # . . .",
        ". . # # . . . # # . . . . . . # . . . . . # # . .",
        "# # # . . . . # # . . . . . . # # . . . . . # # .",
        "# # # . . . . # # . . . . . # # # # . . . # . # .",
        "# # . . . . # # # # . . # . . # . . # # . # # . #",
        "# # . . . . # # # # # # # # # # # # . # # . . . #",
        "# . . # . . . # # # # # # # # # # # # # # # . . #",
        "# . # # . # # . # # # # # # . . . . . . # # . . #",
        ". # # # # # . # # # # # . . . . . . . . . . # . #",
        "# # # # . . . # # # # # . . . . . . . . . . # # #",
        "# # # . . . # # # # # # . . . . . . . . . . # # .",
        "# # # . . . # . # # # # # . . . . . . . . . # . .",
        "# # . # . # # . # # . # # . . . . . . . . . . . .",
        "# . # # # # # . . # . . # # . . . . . . . . . . .",
        "# . # # # # # . . # . . # # . . . . . . . . . . .",
        "# # # # # # # . . # . . # # . . . . . . . . . . ."
    }));
}
TEST(NonogramTest, SolveFace55) {
    std::vector<std::vector<int>> hinfo = {{2, 2}, {2, 2}, {3}, {3}, {3}};
    std::vector<std::vector<int>> winfo = {{2}, {5}, {3}, {5}, {2}};

    auto result = solveNonogram(5, 5, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        "# # . # #",
        "# # . # #",
        ". # # # .",
        ". # # # .",
        ". # # # ."
    }));
}
TEST(NonogramTest, SolveLady4545) {
    std::vector<std::vector<int>> hinfo = {{19, 5, 15}, {5, 9, 8, 8, 2}, {6, 6, 3, 5, 5, 3}, {7, 4, 3, 3, 2, 1, 3, 4}, {8, 3, 5, 4, 3, 2, 5}, {3, 6, 7, 5, 1, 6}, {4, 5, 6, 3, 3, 5}, {5, 3, 2, 3, 9, 3, 3, 1}, {6, 2, 2, 2, 3, 4, 4, 2, 2}, {6, 2, 5, 1, 3, 2, 2, 1, 3}, {1, 7, 5, 1, 11, 2, 2, 5}, {2, 5, 3, 1, 5, 6, 1, 4}, {4, 3, 2, 2, 5, 1, 4}, {5, 1, 2, 1, 3, 4, 2, 2}, {6, 2, 2, 3, 2, 2, 1, 2}, {2, 3, 2, 2, 2, 4, 4, 2}, {6, 2, 1, 4, 4, 2, 2, 2}, {1, 5, 1, 1, 2, 2, 1, 2, 3, 2, 1}, {2, 3, 2, 1, 3, 1, 2, 2, 1, 1, 2}, {2, 6, 1, 2, 3, 5, 1, 3}, {2, 5, 1, 7, 4, 4, 2, 3}, {2, 3, 1, 7, 3, 3, 2, 3}, {2, 4, 2, 6, 2, 3, 3}, {3, 5, 3, 3, 5, 5, 3, 3}, {1, 3, 3, 11, 10, 4}, {4, 5, 7, 1, 1, 1, 3, 3, 4}, {2, 6, 4, 1, 2, 2, 1, 2, 4}, {5, 10, 2, 2, 2, 2, 9}, {3, 2, 9, 2, 5, 2, 7}, {4, 7, 2, 2, 5, 1}, {5, 7, 7, 6, 1}, {3, 1, 6, 1, 1, 1, 5, 1}, {4, 5, 1, 1, 1, 3, 2}, {8, 3, 2, 1, 2, 2, 3}, {4, 3, 1, 5, 1, 4, 1, 2}, {8, 5, 2, 1, 1, 4, 5}, {6, 2, 2, 1, 2, 1, 2, 1, 2, 6}, {4, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1}, {5, 1, 1, 5, 1, 1, 5}, {3, 1, 2, 10, 2, 1, 3}, {1, 10, 2, 1}, {1, 11, 1}, {2, 10, 2}, {2, 12, 2}, {25}};
    std::vector<std::vector<int>> winfo = {{9, 3, 1, 4, 2, 1, 2, 1, 1}, {10, 3, 2, 3, 2, 1, 2, 2, 2}, {11, 3, 1, 1, 6, 2, 2, 1}, {5, 5, 6, 1, 1, 3, 2, 3, 2}, {5, 5, 5, 2, 1, 4, 2, 2}, {1, 4, 4, 8, 2, 2, 6, 3}, {1, 4, 4, 1, 11, 1, 5, 1}, {2, 4, 3, 2, 12, 4, 2}, {3, 9, 2, 13, 4, 2}, {10, 3, 8, 1, 2}, {7, 6, 8, 4}, {5, 3, 7, 8}, {4, 5, 3, 9, 2}, {3, 3, 2, 2, 2, 6, 2}, {2, 6, 2, 3, 2, 6, 1, 1}, {2, 3, 5, 3, 2, 1, 4, 1, 1}, {1, 3, 5, 2, 1, 4, 3, 2, 1}, {1, 4, 3, 4, 5, 2, 1, 1}, {1, 5, 3, 6, 2, 1, 1}, {11, 6, 5, 1}, {1, 2, 2, 1, 7, 2, 2, 2}, {3, 2, 2, 1, 1, 3, 2, 1, 3, 1, 3}, {1, 1, 1, 2, 1, 2, 4, 2, 3, 6}, {2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 6}, {2, 1, 1, 2, 1, 1, 2, 1, 2, 6}, {2, 1, 1, 2, 1, 1, 1, 4, 7}, {3, 2, 2, 2, 2, 1, 1, 1, 8}, {3, 1, 2, 2, 1, 2, 1, 1, 15}, {3, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 8}, {2, 1, 2, 1, 1, 2, 1, 2, 5, 7}, {1, 1, 2, 1, 1, 1, 2, 5, 2, 2, 1, 4}, {1, 2, 2, 2, 1, 4, 2, 3, 1, 1, 2}, {1, 3, 6, 3, 5, 1, 3, 2, 1}, {2, 4, 11, 2, 2, 2, 1}, {2, 2, 4, 6, 3, 5, 1}, {3, 2, 4, 1, 1, 2, 1, 2, 1, 1}, {4, 2, 2, 2, 2, 2, 2, 2, 1}, {5, 2, 2, 3, 4, 2, 2}, {7, 4, 4, 7, 2}, {3, 4, 5, 16}, {2, 7, 6, 7, 4}, {1, 5, 5, 2, 8, 5}, {1, 5, 5, 2, 10, 2, 4, 2}, {6, 5, 2, 10, 2, 2, 2}, {5, 6, 1, 9, 5, 2, 1}};

    auto result = solveNonogram(45, 45, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        "# # # # # # # # # # # # # # # # # # # . . . . # # # # # . . # # # # # # # # # # # # # # #",
        "# # # # # . . # # # # # # # # # . . . . . # # # # # # # # . . . . # # # # # # # # . . # #",
        "# # # # # # . . # # # # # # . . . . . # # # . . . . # # # # # . . . . # # # # # . . # # #",
        "# # # # # # # . . # # # # . . . . # # # . # # # . . . . # # . # . . . . # # # . . # # # #",
        "# # # # # # # # . # # # . . . . # # # # # . . # # # # . . . # # # . . . . # # . # # # # #",
        "# # # . . # # # # # # . . . . # # # # # # # . . . . # # # # # . # . . . . . # # # # # # .",
        "# # # # . . # # # # # . . . # # # # # # . # # # . . . . . . . # # # . . . . # # # # # . .",
        "# # # # # . . # # # . . . . # # . . # # # . . # # # # # # # # # . # # # . . . # # # . . #",
        "# # # # # # . . # # . . . # # . # # . # # # . . . . # # # # . . . # # # # . . # # . . # #",
        ". # # # # # # . # # . . . # # # # # . # . # # # . . . . . . . . # # . . # # . . # . # # #",
        "# . # # # # # # # . . . . # # # # # . # . . # # # # # # # # # # # . # # . # # . # # # # #",
        "# # . . # # # # # . . . . . # # # . . # . . . . # # # # # . . # # # # # # . # . . # # # #",
        "# # # # . . # # # . . . . . . # # . # # . . . . . . . . . . . . # # # # # . # . . # # # #",
        ". # # # # # . . # . . . . . # # . . # . . . . . . . . . # # # . # # # # . # # . . # # . .",
        ". . # # # # # # . . . . . # # . . # # . . # # # . . . . . . . . # # . . # # . . . # . # #",
        "# # . # # # . # # . . . # # . . # # . . . . . . . . . . # # # # . # # # # . . . . . # # .",
        ". # # # # # # . # # . . # . # # # # . . . # # # # . . . . # # . . # # . . . . . . # # . .",
        "# . . # # # # # . # . . # . # # . # # . # . # # . . . . . . . . . # # # . . . . # # . . #",
        "# # . . . # # # . # # . # . # # # . # . . . . . . . . # # . . . . # # . # . . . # . . # #",
        "# # . # # # # # # . # . # # . . . # # # . . . . . . . . . . . . # # # # # . . . # . # # #",
        "# # . . # # # # # . # . . # # # # # # # . . . . . # # # # . . . # # # # . . . # # . # # #",
        ". . # # . . # # # . # . . . # # # # # # # . . . . . # # # . . # # # . . . . . # # . # # #",
        "# # . . . # # # # . # # . . . . # # # # # # . . . . . . . . # # . . . . . . # # # . # # #",
        "# # # . # # # # # . # # # . . # # # . # # # # # . . . . # # # # # . . . . # # # . . # # #",
        ". . # . . . # # # . . # # # . . . . # # # # # # # # # # # . # # # # # # # # # # . # # # #",
        "# # # # . # # # # # . . # # # # # # # . # . # . . . . . . . # . # # # . # # # . . # # # #",
        ". . # # . # # # # # # . . . # # # # . . # . # # . . . . . # # . # . # # . . . . # # # # .",
        "# # # # # . . # # # # # # # # # # . . . # # . # # . . . # # . # # . . # # # # # # # # # .",
        "# # # . # # . # # # # # # # # # . . . . . # # . # # # # # . # # . . . . # # # # # # # . .",
        ". . . # # # # . # # # # # # # . . . . . . . # # . . . . . # # . . . . . . # # # # # . . #",
        ". # # # # # . . # # # # # # # . . . . . . . . # # # # # # # . . . . . . . # # # # # # . #",
        "# # # . . # . . # # # # # # . . . . . . . . . . . # . # . # . . . . . . . . # # # # # . #",
        ". . . # # # # . . # # # # # . . . . . . . . . . . # . # . # . . . . . . . . # # # . . # #",
        ". # # # # # # # # . # # # . . . . . . . . . . . # # . # . # # . . . . . . . # # . . # # #",
        "# # # # . . # # # . . . # . . . . . . . # # # # # . . # . . # # # # . . . . . # . # # . .",
        ". . . . . # # # # # # # # . . . # # # # # . # # . . . # . . . # . # # # # . . # # # # # .",
        ". . . # # # # # # . # # . . . # # . . # . # # . . . . # . . . # # . # . # # . # # # # # #",
        ". . # # # # . . . # # # . . # . . . . # . # . . . . # # # . . . # . # . . # . # # # . . #",
        ". . . . . . . # # # # # . . . . . . . # . # . . . # # # # # . . # . # . . . . # # # # # .",
        ". . . . . . # # # . . # . . . . . . . # # . # # # # # # # # # # . # # . . . . # . . # # #",
        ". . . . . . . . . . . # . . . . . . . . # # # # # # # # # # . . # # . . . . . # . . . . .",
        ". . . . . . . . . . . # . . . . . . . . . . # # # # # # # # # # # . . . . . . # . . . . .",
        ". . . . . . . . . . . # # . . . . . . . . # # # # # # # # # # . . . . . . . # # . . . . .",
        ". . . . . . . . . . . . # # . . . . . . # # # # # # # # # # # # . . . . . # # . . . . . .",
        ". . . . . . . . . . . . . # # # # # # # # # # # # # # # # # # # # # # # # # . . . . . . ."
    }));
}
TEST(NonogramTest, SolveRose3525) {
    std::vector<std::vector<int>> hinfo = {{4}, {2, 1}, {1, 4, 2}, {3, 2, 3, 1, 3}, {2, 1, 2, 3, 2}, {1, 1, 1, 6, 1, 1}, {2, 2, 2, 2, 2, 1}, {1, 3, 3, 2, 1}, {2, 6, 5, 2}, {1, 2, 5, 2}, {3, 3, 5}, {1, 2, 2, 2}, {8, 1, 1}, {1, 2, 2}, {1, 4}, {4, 3}, {5, 4}, {4, 9}, {1, 2, 6, 1, 1}, {7, 1}, {5, 5, 3}, {8, 4, 7}, {1, 11, 5, 2}, {1, 7, 3, 3, 2}, {7, 12}, {2, 4, 4}, {2, 3}, {2, 4}, {5}, {2, 5}, {3, 4, 2, 1}, {10, 2}, {4, 4}, {4}, {2}};
    std::vector<std::vector<int>> winfo = {{4}, {2, 4}, {2, 2, 2, 1}, {3, 2, 5}, {2, 1, 1, 5}, {1, 2, 2, 1, 5}, {1, 2, 1, 2, 1, 5, 1}, {1, 3, 1, 3, 3, 1, 1}, {1, 4, 1, 3, 3, 1, 5}, {2, 2, 1, 5, 1, 9}, {1, 1, 1, 1, 1, 15}, {1, 1, 1, 2, 2, 2, 10, 2}, {1, 2, 2, 1, 1, 1, 7, 1, 2}, {1, 1, 1, 1, 2, 6, 2, 2}, {1, 2, 1, 1, 2, 5, 1, 3}, {1, 2, 1, 4, 4, 2, 3}, {1, 2, 2, 1, 3, 3, 3, 1, 2}, {1, 3, 1, 6, 5, 1, 2}, {4, 1, 1, 2, 2, 2, 2, 2, 1}, {1, 2, 2, 1, 2, 1, 2, 2, 3}, {1, 2, 1, 2, 1, 2, 2, 1}, {1, 2, 5, 1, 2, 1}, {2, 4, 4}, {5, 1, 3}, {2}};

    auto result = solveNonogram(35, 25, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . . . . . . . . . . . . # # # # . . . . . . . .",
        ". . . . . . . . . . . # # . . . . # . . . . . . .",
        ". . . . . . . . . . # . . # # # # . # # . . . . .",
        ". . . . . . . # # # . # # . # # # . # . # # # . .",
        ". . . . . # # . . # . . # # . . . # # # . . # # .",
        ". . . . # . . . # . # . . . # # # # # # . # . # .",
        ". . . # # . . # # . . # # . . . # # . . # # . # .",
        ". . . # . . . # # # . . # # # . . . . # # . . # .",
        ". . # # . . # # # # # # . . . # # # # # . . # # .",
        ". . # . . # # . . . . # # # # # . . . . . # # . .",
        ". . . # # # . . . . . . . # # # . . # # # # # . .",
        ". . . # . . . . . . . # # . . # # . . . . # # . .",
        ". . . . # # # # # # # # . . . . # . . . . # . . .",
        ". . . . . # . . . . . . . . . . # # . . # # . . .",
        ". . . . . . # . . . . . . . . . . # # # # . . . .",
        ". . . . . . # # # # . . . . . . . # # # . . . . .",
        ". . . . . . . # # # # # . . # # # # . . . . . . .",
        ". . . . . . # # # # . # # # # # # # # # . . . . .",
        ". . . . . # . . . # # . . # # # # # # . # . . # .",
        ". . . . . . . . . # # # # # # # . . . . . . . . #",
        ". . # # # # # . . . # # # # # . . . . . . . # # #",
        ". # # # # # # # # . # # # # . . . # # # # # # # .",
        ". # . # # # # # # # # # # # . . # # # # # . # # .",
        "# . # # # # # # # . # # # . . # # # . . . # # . .",
        "# # # # # # # . . . # # # # # # # # # # # # . . .",
        "# # . . . . . . . . # # # # . . . # # # # . . . .",
        "# # . . . . . . . # # # . . . . . . . . . . . . .",
        ". # # . . . . . . # # # # . . . . . . . . . . . .",
        ". . . . . . . # # # # # . . . . . . . . . . . . .",
        ". . . . . . . . . # # . . . # # # # # . . . . . .",
        ". . . . . . . . # # # . # # # # . . # # . # . . .",
        ". . . . . . . . # # # # # # # # # # . # # . . . .",
        ". . . . . . . . # # # # . . . . # # # # . . . . .",
        ". . . . . . # # # # . . . . . . . . . . . . . . .",
        ". . . . . . . . # # . . . . . . . . . . . . . . ."
    }));
}
TEST(NonogramTest, SolveSeal2525) {
    std::vector<std::vector<int>> hinfo = {{8}, {7, 3}, {16}, {11, 4}, {13, 2}, {14, 2}, {18}, {8, 4}, {6, 4}, {5, 5}, {4, 2, 2}, {4, 3, 1}, {3, 2, 1}, {3, 2}, {3, 2}, {2, 1, 4}, {2, 1, 4}, {2, 1, 4}, {3, 1, 4}, {5, 4}, {11}, {10}, {5}, {5}, {6}};
    std::vector<std::vector<int>> winfo = {{1}, {2}, {2}, {4}, {11}, {13}, {15}, {9, 3}, {8, 3}, {7, 5, 2}, {7, 3, 4}, {6, 2, 3}, {8, 3, 2}, {13, 2}, {10, 2}, {5, 5, 3}, {4, 1, 4, 6}, {1, 2, 2, 8}, {3, 1, 10}, {3, 1, 4, 4}, {2, 1, 2, 3}, {2, 1, 2}, {2, 1}, {2, 1}, {1}};

    auto result = solveNonogram(25, 25, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . . . . . . . . . . . # # # # # # # # . . . . .",
        ". . . . . . . . . . # # # # # # # . # # # . . . .",
        ". . . . . . . . # # # # # # # # # # # # # # # # .",
        ". . . . . . . # # # # # # # # # # # . . . # # # #",
        ". . . # # # # # # # # # # # # # . . . # # . . . .",
        ". # # # # # # # # # # # # # # . . # # . . . . . .",
        "# # # # # # # # # # # # # # # # # # . . . . . . .",
        ". . . # # # # # # # # . # # # # . . . . . . . . .",
        ". . . . # # # # # # . . . # # # # . . . . . . . .",
        ". . . . # # # # # . . . # # # # # . . . . . . . .",
        ". . . . # # # # . . . . # # . # # . . . . . . . .",
        ". . . . # # # # . . . # # # . . # . . . . . . . .",
        ". . . . # # # . . . # # . # . . . . . . . . . . .",
        ". . . . # # # . . # # . . . . . . . . . . . . . .",
        ". . . . # # # . . # # . . . . . . . . . . . . . .",
        ". . . . . # # . . # . . . . . . . . # # # # . . .",
        ". . . . . # # . . # . . . . . . . # # # # . . . .",
        ". . . . . . # # . # . . . . . . # # # # . . . . .",
        ". . . . . . # # # . # . . . . . # # # # . . . . .",
        ". . . . . . . # # # # # . . . # # # # . . . . . .",
        ". . . . . . . . # # # # # # # # # # # . . . . . .",
        ". . . . . . . . . . # # # # # # # # # # . . . . .",
        ". . . . . . . . . . . . . . . . # # # # # . . . .",
        ". . . . . . . . . . . . . . . . . # # # # # . . .",
        ". . . . . . . . . . . . . . . . . . # # # # # # ."
    }));
}
TEST(NonogramTest, SolveWhale3030) {
    std::vector<std::vector<int>> hinfo = {{4, 5}, {7, 7}, {8, 4, 3}, {3, 4, 2, 3}, {3, 3, 2, 1}, {1, 2, 2, 3}, {3, 2, 1, 5}, {5, 1, 1, 2, 2}, {2, 2, 3, 1}, {1, 2}, {2}, {5}, {10}, {14}, {16, 2}, {17, 3}, {19, 4}, {19, 4}, {20, 5, 2}, {21, 8}, {7, 13, 6}, {6, 1, 13, 4}, {6, 14, 2}, {10, 12, 3}, {7, 17}, {18}, {22}, {3, 3, 5}, {5, 4}, {4, 3}};
    std::vector<std::vector<int>> winfo = {{3, 8}, {5, 11}, {5, 2, 12}, {3, 3, 12}, {3, 2, 13, 1}, {4, 3, 13, 1}, {4, 3, 10, 2, 1}, {6, 9, 1, 2, 3}, {18, 2, 5}, {16, 5}, {5, 12, 3, 2}, {4, 15, 2}, {3, 3, 16}, {3, 3, 17}, {3, 2, 17}, {2, 3, 14, 2}, {4, 2, 13, 2}, {5, 12}, {3, 11}, {9}, {9}, {4, 7}, {6, 5}, {6, 4}, {5, 5}, {9}, {6}, {3}, {4}, {3}};

    auto result = solveNonogram(30, 30, hinfo, winfo);

    EXPECT_EQ(toStringList(result), std::vector<std::string>({
        ". . # # # # . . . . . . . # # # # # . . . . . . . . . . . .",
        ". # # # # # # # . . . . # # # # # # # . . . . . . . . . . .",
        "# # # # # # # # . . . # # # # . # # # . . . . . . . . . . .",
        "# # # . . # # # # . . # # . . . # # # . . . . . . . . . . .",
        "# # # . . . # # # . # # . . . . . # . . . . . . . . . . . .",
        ". # . . . . . # # . # # . # # # . . . . . . . . . . . . . .",
        ". . . # # # . # # . # . # # # # # . . . . . . . . . . . . .",
        ". . # # # # # . # . # . # # . # # . . . . . . . . . . . . .",
        ". . # # . # # . # # # . # . . . . . . . . . . . . . . . . .",
        ". . . . . . # . # # . . . . . . . . . . . . . . . . . . . .",
        ". . . . . . . . # # . . . . . . . . . . . . . . . . . . . .",
        ". . . . . . # # # # # . . . . . . . . . . . . . . . . . . .",
        ". . . . # # # # # # # # # # . . . . . . . . . . . . . . . .",
        ". . # # # # # # # # # # # # # # . . . . . . . . . . . . . .",
        ". # # # # # # # # # # # # # # # # . . . . . # # . . . . . .",
        ". # # # # # # # # # # # # # # # # # . . . # # # . . . . . .",
        "# # # # # # # # # # # # # # # # # # # . . # # # # . . . . .",
        "# # # # # # # # # # # # # # # # # # # . . # # # # . . . . .",
        "# # # # # # # # # # # # # # # # # # # # . # # # # # . . # #",
        "# # # # # # # # # # # # # # # # # # # # # . # # # # # # # #",
        "# # # # # # # . # # # # # # # # # # # # # . . . # # # # # #",
        "# # # # # # . # . # # # # # # # # # # # # # . . . # # # # .",
        "# # # # # # . . # # # # # # # # # # # # # # . . . # # . . .",
        "# # # # # # # # # # . # # # # # # # # # # # # . # # # . . .",
        ". # # # # # # # . . # # # # # # # # # # # # # # # # # . . .",
        ". . . . . . . . # # # # # # # # # # # # # # # # # # . . . .",
        ". . . . # # # # # # # # # # # # # # # # # # # # # # . . . .",
        ". . . . . . . # # # . . # # # . . . . . # # # # # . . . . .",
        ". . . . . . . # # # # # . # # # # . . . . . . . . . . . . .",
        ". . . . . . . . # # # # . . # # # . . . . . . . . . . . . ."
    }));
}